
# Git & Chips
### git initiation 
### 30.05.12 
### Andreas Kundig + David Hodgetts
### made possible by Pro Git book 
### creative commons

# what is git

* distributed version control

* ![](images/distributed.png)


# some defining features

* stores snaphots

* ![](images/snapshots.png)

* not diffs

* ![](images/snapshotsDiff.png)

* local operations possible

* git integrity (sha1)

* you only ever really add data

# local operations

* ![](images/localOperations.png)


# installation

* linux -> apt-get install git-core

* mac -> http://code.google.com/p/git-osx-installer

* mac -> homebrew -> http://mxcl.github.com/homebrew/

* windows -> http://code.google.com/p/msysgit

* windows -> http://cygwin.com


# first time configuration

* git config --global user.name "Andreas Kundig"

* git config --global user.email andreas@kundig.com

* git config --global core.editor "mate -w"

* more configs -> http://www.arthurkoziel.com/2008/05/02/git-configuration/

* git config --list



# my first repo

* git init

* git status

* git add myFile

* git commit

* git commit -m "commit message: i can haz cheeseburger"


# cloning an existing repo

* git clone [url]  

* git clone git://github.com/user/repo.git

* git clone https://github.com/user/repo.git

* git clone user@someserver.com:git/myrepo.git



# file status

* files can be tracked (files that were in the last snapshot) or untracked

* tracked files can be unmodified, modified or staged

* ![](images/fileLifecycle.png)

* git status

* ![](images/localOperations.png)

# don't ignore me

.gitignore

~~~~~~~~~~
# a comment - this is ignored
*.a       # no .a files
!lib.a    # but do track lib.a, even though you're ignoring .a files above
/TODO     # only ignore the root TODO file, not subdir/TODO
build/    # ignore all files in the build/ directory
doc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt
~~~~~~~~~~

# skip the staging area

* git commit -am "commit all changes on tracked files but not any new files"

# mv - rm

* git mv oldFilename newFilename

* git rm file   # removes from repo and working directory

* git rm --cached file  # only removes from repo (file no longer tracked but on working dir)


# viewing the commit history

* git log

* git log -p -2

* git log --stat

* git log --pretty=oneline

* git log --pretty=format:"%h %s" --graph

* git log --graph --decorate --oneline

# undoing stuff

* git commit --amend

* unstaging staged file -> check out git status -> git reset HEAD fileName

* unmodifying a modified file (not staged) -> look at git status -> git checkout -- fileName


# Git Branching

* single commit

* ![](images/singleCommitTree.png)

* we add some commits

* ![](images/multipleCommits.png)

# so a branch is ...

* a movable pointer to one of these commits

* default branch is called "master"

* ![](images/branchPointer.png)

# creating a new branch means ...

* adding a new movable pointer

* git branch testing

* ![](images/newBranch.png)

# ok but how does Git know on which branch i am?

* it uses a special pointer called HEAD

* ![](images/headOnMaster.png)

* if we change branches: git checkout testing 

* ![](images/headOnTesting.png)

# HEAD moves with the new commits on current branch

* modify file on testing + commit on testing

* ![](images/headMovedOnTesting.png)

* git checkout master

* ![](images/headBackOnMaster.png)

# alternate history

* let's do some work on master and commit

* ![](images/headMovedOnMaster.png)

* mmm but how do i reconcile my diverging branches? ...

# merging

* a new project on my supersite for my superstartup

* ![](images/supersiteStart.png)

* let's work on issue 53

* git checkout -b iss53  (same as "git branch iss53" followed by "git checkout iss53")

* ![](images/createdIss53.png)

* do some work and commit

* ![](images/commitOnIss53.png)

# oh boy there is an urgent fix required on the production version (master)

* commit your work on iss53

* checkout master

* create a hotfix branch on master -> git checkout -b hotfix

* do the fix and commit

* ![](images/hotfixBranch.png)

# if hotfix is approved we can merge it back into master

* git checkout master

* git merge hotfix

* ![](images/fastForward.png)

* master is "fast forwarded" (the pointer has just to move point to the same commit as hotfix)

* hotfix branch no longer needed -> git branch -d hotfix

# get back to work on issue 53

* git checkout iss53

* do work and commit

* ![](images/moreWorkOnIss53.png)

# we assume work is done on issue 53 we want to merge work back into master

* git checkout master

* git merge iss53

* Fast forward not possible

* ![](images/moreWorkOnIss53.png)

# git does a 3 way merge

* (master, iss53 and first common ancestor)

* ![](images/3wayMerge.png)

* result:

* ![](images/3wayMergeResult.png)

# merge conflicts

* ![](images/3wayMerge.png)

# branch management

* git branch

* git branch -a

* git branch -r

* git branch --merged (shows branches that are already merged on current branch)

* delete branch: git branch -d

# remotes and remote branches

* git clone supersite

* ![](images/gitClone.png)

* Remote branches act as bookmarks to remind you where the branches on your remote repositories were the last time you connected to them.

* remote/branch

* origin/master

* pierre/development

# remote management

* git remote 

* git remote show origin

* git remote add repoOfAndreas git://github.com/repoOfAndreas.git

* git remote show repoOfAndreas

* git remote rename oldName newName

* git remote rm repoOfAndreas    (removes remote named repoOfAndreas)

# how does it work?

* someone works on the projet and pushes to origin

* ![](images/pushOnOrigin.png)

* histories diverge, again... 

# sync with remote

* git fetch origin

* ![](images/gitFetch.png)

* git log origin/master

* git diff master origin/master

* git merge origin/master     

# you can also use Pull instead of Fetch

* pull does :

* git fetch  +  git merge into current branch

* but it's a not really the git way

# Push your work

* git push

* git push remoteName branchName

* git push origin master

# what's next

* http://git-scm.com/documentation/external-links

* stackoverflow

